#!/usr/bin/env python
import ssl, socket, sys
# PROJECT 1
# Server address to connect to
# server_address = ('login.ccs.neu.edu', 27993)
# yulia_secret_key = '9e2677f4533cad7f9bafea36b10789e'
# anya_secret_key = '9503ad389fb5789ecfd482306029f49'
# anya_husky_id = '001959524'
# yulia_husky_id = '001910132'
# anya_ssl_secret_key = '69f4c29fde744112be2d01d41f7fa3233ea3023b589e580381ddf2e4d750d528'
# yulia_ssl_secret_key = 'a9a5c8f48d1523c2b73078f9ea682c55b733411bee831c4a85cce4f6cbf33cd5'

class Server(object):
    def __init__(self, port, s, host, nuid):
        self.port = port
        self.s = s
        self.host = host
        self.nuid = nuid

# Get the parameters from users input
def get_param():
    user_input = sys.argv
    # if port is not specified
    if ('-p' not in user_input):
        if ('-s' in user_input) and (user_input.index('-s') == 1) and len(user_input) == 4:
            return Server(27994, True, user_input[2], user_input[3])
        elif (len(user_input) == 3):
            return Server(27993, False, user_input[1], user_input[2])
        else:
            print 'Wrong command format. The syntax is ./client <-p port> <-s> [hostname] [NEU ID]'
            return 0
    # if port is specified
    elif ('-p' in user_input):
        if ('-s' in user_input) and (len(user_input) == 6):
            return Server(user_input[2], True, user_input[4], user_input[5])
        elif ('-s' not in user_input) and (len(user_input) == 5):
            return Server(user_input[2], False, user_input[3], user_input[4])
        else:
            print 'Wrong command format. The syntax is ./client <-p port> <-s> [hostname] [NEU ID]'
            return 0
# Takes as parameter a mathematical expression
# Valid format: [a number] [a math operator] [another number]
# Numbers are in range [1, 1000]
# Valid math operators: + - * /
# Returns True if the given expression e is valid, and False otherwise
def valid_expression(e):
    valid = False
    math_operator = e.split(" ")[1]
    first = int(e.split(" ")[0])
    second = int(e.split(" ")[2])
    if (math_operator == '+' or math_operator == '-' or math_operator == '/' or math_operator == '*') and (first >= 1 and first <= 1000) and (second >= 1 and second <= 1000):
        valid = True
    return valid

# Calculates mathematical expressions and send the solution to the server until 
# gets BYE message
def calculate(d, sock):
    data = d
    while data != None:
        try: 
            if data[:14] == 'cs3700fall2015':
                if data[15:21] == 'STATUS':
                    if len(data.split("STATUS ", 1)[1]) > 0:
                        # Get mathematical expression, for example: 3 + 4
                        expression = data.split("STATUS ", 1)[1]
                        # Check if expression is valid
                        if valid_expression(expression):
                            # Evaluate mathematical expression
                            solution = eval(expression)
                            solution_message = 'cs3700fall2015 %d' % (solution) + '\n'
                            # Send solution
                            sock.sendall(solution_message)
                            # Receive new STATUS message
                            data = sock.recv(8192)
                        else:
                            print 'ERROR: not valid mathematical expression "%s"' % expression
                            data = None
                elif data[15:18] == 'BYE':
                    if 'Unknown_Husky_ID' in data:
                        print 'ERROR: Unknown Husky Id'
                        data = None
                    else:
                        print data.split("BYE ", 1)[1]
                        data = None
                else:
                    print 'ERROR: Received unknown or invalid type of message "%s"' % data
                    data = None
            else:
                print 'ERROR: wrong class code "%s"' % data[:14]
                data = None
        except IndexError: 
            print 'IndexError: was not able to get required characters from data: "%s"' % data
            data = None

# Initializes a socket and starts calculation process
def init():
    try:
        user_data = get_param()
        if user_data != 0:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            used_sock = sock
            if user_data.s:
                used_sock = ssl.wrap_socket(sock, ssl_version=ssl.PROTOCOL_TLSv1)

            port = user_data.port
            server = user_data.host
            husky_id = user_data.nuid
            used_sock.connect((server, int(port)))
            #sock.connect((server, int(port)))
            try:      
                # Sending first type of message
                message = 'cs3700fall2015 HELLO ' + husky_id + '\n'
                used_sock.sendall(message)
                # Receive first STATUS message
                data = used_sock.recv(8192)
                if len(data) > 0:
                    calculate(data, used_sock)
                else:
                    print 'ERROR: No initial data was received "%s"' % data      
            finally:
                used_sock.close()

    except socket.error, (value, message):    
        print "ERROR: Could not open socket: " + message

init()
    
