#!/usr/bin/python -u    
# The -u makes output unbuffered, so it will show up immediately
import sys
import socket
import select
# forwarding table is a dictionary of <IP: Port> 
'''
Forwarding Table is a dictionary of <IP, Port>
FUNCTIONALITY:
1) add entries
2) delete entries
3) flush the tale of any bridges port changes state (designated, root...)
4) timeout forwarding table entries 5 sec after receiving the last msg
   from that address
5) print 'forwarding', 'broadcasting' or 'not forwarding' when the bridge made 
   a decision
'''

'''
Bridge:
FUNCTIONALITY:
1) for a spanning tree
2) handle failures
3) intruduce new bridges
4) learn location of end host
5) deliver and host packets to the destination
6) handle mobility between end-hosts getween LANs
7) bridge broadcast BPDU on all ports and dont broadcast more freq 
   than once/500s 
8) constantly listen to new roots and should know about
   which ports are active and inactive upon receiving each BPDU
'''
class Bridge(object):

    def __init__(self, b_id, lans):
        self.b_id = b_id
        self.lans = lans
        self.start = 0 
        self.stop = 0
        self.forwarding_table = {}
        self.bpdu_table = []

# pads the name with null bytes at the end
def pad(name):
    result = '\0' + name
    while len(result) < 108:
        result += '\0'
    return result
 
if __name__ == "__main__":
    bridge = Bridge(sys.argv[1], sys.argv[2:])

    #listsocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)      #
    #listsocket.listen(10)                                               #

    #listsocket.sendto(data, ('<broadcast>', PORT))                      # port?
    sockets = []    

    #sockets.append(listsocket)                                          #
    # creates sockets and connects to them
    for x in range(len(bridge.lans)):
        s = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
        s.connect(pad(bridge.lans[x]))
        sockets.append(s)
        
        
    print "Bridge " + bridge.b_id + " starting up\n"

    # Main loop
    while True:

        port = 0
        for s in sockets:
            message = {"source":bridge.b_id, "dest":"ffff", "type": "bpdu", "message":{"id":"92b4", "root":bridge.b_id, "cost":0, "port":port}};
            bridge.bpdu_table.append(message)
            s.send(message)
            port++

        # Calls select with all the sockets; change the timeout value (1)
        ready, ignore, ignore2 = select.select(sockets, [], [], 0.750)

        # Reads from each fo the ready sockets
        for x in ready:
            data = x.recv(1500)
            print(data)
            x.sendall(bpdu_table[0])


