#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#
# NEW RENO: http://research.ijcaonline.org/volume40/number12/pxc3877351.pdf
# SACK: http://packetlife.net/blog/2010/jun/17/tcp-selective-acknowledgments-sack/

import sys
import socket
import time
import datetime
import select
import json
import hashlib

MSG_SIZE = 1500
DATA_SIZE = 1000
DATA = {}

TOTAL_DATA

TIMEOUT = 30
SEQUENCE = 0
#ACK = 0
DUPS_ACK_COUNT = 0

LAST_BYTE_SENT = 0
LAST_BYTE_ACKED = 0

CONGESTION_WIN = 1
ADV_WIN = 0     ## FLOW CONTROL, ADV WIN FROM RECEIVER

EFFECTIVE_WINDOW = 0
#STATE = 0 #0 = slow start, 1 = AI
ALPHA = 0.875

SSTHRESH = ADV_WIN


# lastByteSent
# lastByteAcked
# lastByteSentBefore3xDupAcksRecvd
# congWindow
# SSThresh
# dupACKcount
# rcvWindow

# onExpiredRTOtimer()
# onThreeDuplicateACKs()
# timerExpired()     --> slow start?
# send()
# process_ack()
# resetParametersToSlowStart()
# calcCongWinAfterNewAck()

# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)
# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.settimeout(TIMEOUT)

#calculates estimated timeout time based on RTTs
#Inputs: SampleRTT, old estimatedRTT, alpha
def estimate_timeout(timestamp, old_rtt):
    sample_rtt = time.time() - timestamp #current_time - timestamp
    estimated_rtt = (1 - ALPHA) * old_rtt * (0.875 * ALPHA)
    return estimated_rtt

## calculates congestion window
## call it when NEW ack was received
def calc_congestion_window_after_new_ack():
    global CONGESTION_WIN

    if (CONGESTION_WIN < SSTHRESH):
        #slow start
        CONGESTION_WIN = CONGESTION_WIN + 1 ##?????????? or cwnd = cwnd + MSS
    ## congestion avoidance
    else:
        CONGESTION_WIN = CONGESTION_WIN + (1/CONGESTION_WIN) ##?????????? or cwnd = cwnd+ mss*(mss/cwnd)

## if duplicate or old ack:
# if tcp.ack==snd.una:    # duplicate acknowledgement
#     dupacks++
#     if dupacks==3:
#       retransmitsegment(snd.una)
#       ssthresh=max(cwnd/2,2*MSS)
#       cwnd=ssthresh
#   else:    # ack for old segment, ignored
#     dupacks=0
    

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

## Calculate checksum
def digest_data(data):
    m = hashlib.md5() 
    m.update(data)
    return m.digest()

def process_ack(packet):
  #SEQUENCE = packet["ack"]
  ## if new ack received:
    ## Update the running estimate of the RTO timer interval.
    ## Update the congestion window size
    ## Figure out next state
  ## if dup ack
    ## increment
    ## if 3 dup ack -> fast retransmit and update congestion params
  log("[recv ack] " + str(SEQUENCE))

def send_next_packet():
  global SEQUENCE

  data = sys.stdin.read(DATA_SIZE)
  if (len(data) > 0):
    ## binary encode
    msg = json.dumps({"sequence": SEQUENCE, "data": data, "ack": False, "eof": False, "digested": digest_data(data)})
    SEQUENCE += len(data)

    if sock.sendto(msg, dest) < len(msg):
      log("[error] unable to fully send packet")
    else:
      log("[send data] " + str(SEQUENCE) + " (" + str(len(data)) + ")")
    return True
  else:
    return False

# Send first packet
#send_next_packet()

def read_input():
    global TOTAL_DATA
    TOTAL_DATA = sys.stdin.read()
    print(TOTAL_DATA)

read_input()
# Now read in data, send packets
 while True:
   log("ABOUT TO SLEEP")
   result = sock.recvfrom(MSG_SIZE)

   if result:
     (data, addr) = result
     try:
       decoded = json.loads(data)

       ## We process only ACKs and ignore anything else
       # If there is an ack, send next packet
       if decoded['ack'] == SEQUENCE:
         print "HERE"
         process_ack(decoded)
       
         # Try to send next packet; break if no more data
         if (not send_next_packet()):
           break
     except (ValueError, KeyError, TypeError):
       log("[recv corrupt packet]")
   else:
     log("[error] timeout")
     sys.exit(-1)

sock.sendto(json.dumps({"src": 1, "dest": 2, "eof": True, "data": "", "sequence": SEQUENCE, "ack": False}), dest)
sys.exit(0)
