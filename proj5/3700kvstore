#!/usr/bin/env python

import sys, socket, math, random, select, time, json, random

# Your ID number
my_id = sys.argv[1]

# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]
total_servers = 1 + len(replica_ids)
quorum = math.ceil(total_servers / 2.0)
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
sock.connect(my_id)

datastore = {} 

class Replica(object):
    def __init__(self):
        self.my_id = sys.argv[1] 
        self.state = "f" # follower, candidate, leader
        self.neighbors = sys.argv[2:] # for leaders its a list of followers
        self.logs = [] #{} # {index_number: {term: 1, key: 123, val: "asdf", action: get/put}}
        self.commit_index = 0
        self.last_applied = 0
        self.term = 0
        self.leader = "FFFF" 
        self.datastore = {}
        self.voted_for = -1
        self.election_timeout = random.uniform(0.15, 0.3)
        self.last_response_received = 0 # only from leaders or candidates
        #for candidate
        self.voters = []
        # for leaders
        self.next_index = {} # for each server, index of the next log entry to send to that server. Init to leader last lof index + 1
        self.match_index = {} # for each server, index of highest log entry known to be replicated on server. init to 0 then i++

    def get_last_log(self):
        last_log = {}
        last_log["term"] = -1
        last_log["log_index"] = -1
        #if there are no logs then return {log_index: -1, term: -1}
        if len(self.logs) != 0:
            last_index = len(self.logs) #max(self.logs.keys())
            last_log = self.logs[last_index - 1].copy()#self.logs[last_index].copy() 
            last_log["log_index"] = last_index       
        return last_log

    #================for candidates ================
    def request_vote(self):
        self.term += 1
        self.state = "c"
        self.voters.append(self.my_id)
        last_log = self.get_last_log()
        for replica_id in self.neighbors:
            req_vote = {"src": self.my_id, "dst": replica_id, "leader": self.leader, "term": self.term, "type": "req_vote", "last_log": last_log}
            sock.send(json.dumps(req_vote) + "\n")

    def candidate_up_to_date(self, msg):
        my_last_log = self.get_last_log()
        my_last_log_term = my_last_log["term"]
        if my_last_log_term < msg["last_log"]["term"]: # term of last log entry
            return True
        elif my_last_log_term > msg["last_log"]["term"]:
            return False
        else:
            return my_last_log["log_index"] <= msg["last_log"]["log_index"]
    def switch_to_follower(self, request):
        self.state = "f"
        self.leader = request["leader"]
        self.term = max(self.term, request["term"])
        self.voted_for = -1
        self.voters = []
        self.match_index = []
        self.next_index = []

    def switch_to_leader(self, request):
        if self.state == "c":
            self.state = "l"
            self.leader = self.my_id
            print "%s is a new leader. voters: %s" % (self.my_id, json.dumps(self.voters))
            self.voters = []
            self.voted_for = -1
            self.init_match_index()
            self.init_next_index()
        else:
            print "%s failed to update to become a lreader" % self.my_id
    
    #============= for followers ==============
    def redirect(self, msg):
        print "in redirect"
        redirect_msg = {"src": self.my_id, "dst": msg["src"], "MID": msg["MID"], "leader": self.leader, "type": "redirect"}
        print "====> REDIRECT: %s" % json.dumps(redirect_msg)
        sock.send(json.dumps(redirect_msg) + "\n") 
    
    def elect_candidate(self, request):
        # received a stale req and respond negatively
        if self.term > request["term"]:
            print "request vote denied, %s should update its term" % request["src"]
            response = {"src": self.my_id, "dst": request["src"], "leader": self.leader, "term": self.term, "type": "vote_result", "vote": "no"}
            sock.send(json.dumps(response) + "\n")
        # the current replica is outdated then switch to follower
        elif self.term < request["term"]:
            self.last_response_received = time.time()
            if self.state != "f":
                print "I'm outdated, switching to follower"
                self.switch_to_follower(request)

            if self.voted_for == -1 and self.candidate_up_to_date(request):
                self.voted_for = request["src"]
                self.term = max(self.term, request["term"])
                response = {"src": self.my_id, "dst": request["src"], "leader": self.leader, "term": self.term, "type": "vote_result", "vote": "yes"}
                print "[%s vote response]: %s" %(self.my_id, json.dumps(response))
                sock.send(json.dumps(response) + "\n")
    

    # =========== for leader ================
    def init_next_index(self):
        leader_next_index = len(self.logs)
        print "leader's next index: %d" %leader_next_index
        for replica_id in self.neighbors:
            self.next_index[replica_id] = leader_next_index
    
    def init_match_index(self):
        for replica_id in self.neighbors:
            self.match_index[replica_id] = 0

    def send_heartbeat(self):
        for replica_id in self.neighbors:
            msg = {'src': my_id, 'dst': replica_id, "term": self.term, 'leader': self.leader, 'type': 'heartbeat'}
            sock.send(json.dumps(msg) + '\n')
            print '%s sending a heartbeat to %s' % (msg['src'], msg['dst'])
    
    def process_log(self, msg):
        last_log = self.get_last_log()
        log_term = self.term
        log = {"src": msg["src"], "MID": msg["MID"], "term": self.term, "type": msg["type"], "key": msg["key"]}
        if msg["type"] == "put":
            log["value"] = msg["value"]
        self.logs.append(log) #self.logs[log_index] = log
        print "[logs]: %s" %json.dumps(self.logs)
        #print "[logs]: %d" %len(self.logs)#%json.dumps(self.logs)
        self.replicate_log(msg)

    def replicate_log(self, msg):
        for replica_id in self.neighbors:
            append_entry = {"src": self.my_id, "dst": replica_id, "type": "append_log", "term": self.term, "leader": self.leader, "prev_log_index" }
        sock.send(json.dumps({'src': self.my_id, 'dst': msg['src'], 'leader': self.leader,'type': 'fail', 'MID': msg['MID']}) + '\n')

    #============== handling messages ===================
    def handle_log(self, msg):
        if msg['type'] in ['get', 'put']:
            print "%s got a log: %s" % (self.my_id, json.dumps(msg))
            if self.state == "f": #im a follower - redirect to leader
                self.redirect(msg)
            elif self.state == "l":
                self.process_log(msg)
    
    
    def handle_vote_result(self, result):
        if self.state != "c":
            print "%s is not a candidate but received a vote response " % self.my_id
        else:
            print "%s received a vote result %s" %(self.my_id, json.dumps(result))
            if self.term > result["term"]:
                print "stale term in voteresult"
            elif self.term < result["term"]:
                print "Im behind, switching to follower"
            else:
                if result["vote"] == "yes":
                    self.voters.append(result["src"])
                    print "total votes: %s, quorum: %s" %(str(len(self.voters)), str(quorum))
                    if len(self.voters) >= quorum: #reched the quorum
                        self.switch_to_leader(result)
                else:
                    print "got denied: %s" %json.dumps(result)
   
    def handle_heartbeat(self, msg):
        if self.term > msg["term"]:
            print "%s doesnt recognise leader: %s" %(self.my_id, json.dumps(msg))
        elif self.term <= msg["term"]:
            self.last_response_received = time.time()
            if self.state == "c" or self.state == "l":
                self.switch_to_follower(msg)
            else: #I'm a follower
                if self.leader != msg["leader"]: #new leader is elected
                    self.leader = msg["leader"]
                self.voted_for = -1
                print "[heartbeat]: %s: leader - %s, term - %s, log - %s" %(self.my_id, self.leader, self.term, json.dumps(self.logs))
                self.term = max(self.term, msg["term"])
    def put(self, data):
        return 0
    
    def get(self, key):
        return 0
    

    def main(self):
        self.last_response_received = time.time()
        last_heartbeat_sent = time.time()
        print "%s is starting. Election timeout: %s ms" %(self.my_id, str(self.election_timeout))
        while True:
            current = time.time()
            if (current - self.last_response_received) > self.election_timeout and self.state == "f": #timeout
                self.request_vote()

            ready = select.select([sock], [], [], 0.1)[0]
            if sock in ready:
                raw = sock.recv(32768)
                #print "[new msg] %s" %(raw)
                # we may receive multiple messages during a single recv(); \n denotes the break between messages
                for msg_raw in raw.split('\n'):
                    if len(msg_raw) == 0: continue
                    try:
                        msg = json.loads(msg_raw)
                             
                        # For now, respond to all client messages with a type=fail response
                        if msg['type'] in ['get', 'put']:
                            self.handle_log(msg)
                        elif msg["type"] == "heartbeat":
                            #print "%s received a heartbeat from %s" % (self.my_id, msg["src"])
                            self.handle_heartbeat(msg)
                        elif msg["type"] == "redirect":
                            print "received a redirect"
                            self.handle_redirect(msg)
                        elif msg["type"] == "vote_result":
                            self.handle_vote_result(msg)
                        elif msg["type"] == "req_vote":
                            print "%s received a vote request %s " %(self.my_id, json.dumps(msg))
                            self.elect_candidate(msg)
                        # Handle noop messages. This may be removed from your final implementation
                        elif msg['type'] == 'noop':
                            print '%s received a NOOP from %s' % (msg['dst'], msg['src'])
                    except ValueError:
                        print "[INCOMPLETE MSG]"

            if self.state == "l":
                clock = time.time()
                if clock - last_heartbeat_sent > 0.05: #send heartbeats every 50ms
                    self.send_heartbeat()
                    last_heartbeat_sent = clock

r = Replica()
r.main()
